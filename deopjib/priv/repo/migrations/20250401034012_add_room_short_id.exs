defmodule Deopjib.Repo.Migrations.AddRoomShortIdAndRestrict do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    alter table(:rooms) do
      add(:short_id, :text)
    end

    create(unique_index(:rooms, [:short_id], name: "rooms_unique_short_id_index"))

    drop(constraint(:payer, "payer_room_id_fkey"))

    alter table(:payer) do
      modify(
        :room_id,
        references(:rooms,
          column: :id,
          name: "payer_room_id_fkey",
          type: :uuid,
          prefix: "public",
          on_delete: :restrict
        )
      )
    end

    create(unique_index(:payer, [:name, :room_id], name: "payer_unique_name_per_room_index"))

    drop(constraint(:pay_item_excluded_payers, "pay_item_excluded_payers_payer_id_fkey"))

    drop(constraint(:pay_item_excluded_payers, "pay_item_excluded_payers_pay_item_id_fkey"))

    alter table(:pay_item_excluded_payers) do
      modify(
        :pay_item_id,
        references(:pay_item,
          column: :id,
          name: "pay_item_excluded_payers_pay_item_id_fkey",
          type: :uuid,
          prefix: "public",
          on_delete: :restrict
        )
      )

      modify(
        :payer_id,
        references(:payer,
          column: :id,
          name: "pay_item_excluded_payers_payer_id_fkey",
          type: :uuid,
          prefix: "public",
          on_delete: :restrict
        )
      )
    end

    drop(constraint(:pay_item, "pay_item_settled_ids_fkey"))

    drop(constraint(:pay_item, "pay_item_room_id_fkey"))

    alter table(:pay_item) do
      modify(
        :room_id,
        references(:rooms,
          column: :id,
          name: "pay_item_room_id_fkey",
          type: :uuid,
          prefix: "public",
          on_delete: :restrict
        )
      )

      modify(
        :settled_ids,
        references(:payer,
          column: :id,
          name: "pay_item_settled_ids_fkey",
          type: :uuid,
          prefix: "public",
          on_delete: :restrict
        )
      )
    end
  end

  def down do
    drop(constraint(:pay_item, "pay_item_room_id_fkey"))

    drop(constraint(:pay_item, "pay_item_settled_ids_fkey"))

    alter table(:pay_item) do
      modify(
        :settled_ids,
        references(:payer,
          column: :id,
          name: "pay_item_settled_ids_fkey",
          type: :uuid,
          prefix: "public",
          on_delete: :delete_all
        )
      )

      modify(
        :room_id,
        references(:rooms,
          column: :id,
          name: "pay_item_room_id_fkey",
          type: :uuid,
          prefix: "public",
          on_delete: :delete_all
        )
      )
    end

    drop(constraint(:pay_item_excluded_payers, "pay_item_excluded_payers_pay_item_id_fkey"))

    drop(constraint(:pay_item_excluded_payers, "pay_item_excluded_payers_payer_id_fkey"))

    alter table(:pay_item_excluded_payers) do
      modify(
        :payer_id,
        references(:payer,
          column: :id,
          name: "pay_item_excluded_payers_payer_id_fkey",
          type: :uuid,
          prefix: "public",
          on_delete: :delete_all
        )
      )

      modify(
        :pay_item_id,
        references(:pay_item,
          column: :id,
          name: "pay_item_excluded_payers_pay_item_id_fkey",
          type: :uuid,
          prefix: "public",
          on_delete: :delete_all
        )
      )
    end

    drop_if_exists(
      unique_index(:payer, [:name, :room_id], name: "payer_unique_name_per_room_index")
    )

    drop(constraint(:payer, "payer_room_id_fkey"))

    alter table(:payer) do
      modify(
        :room_id,
        references(:rooms,
          column: :id,
          name: "payer_room_id_fkey",
          type: :uuid,
          prefix: "public",
          on_delete: :delete_all
        )
      )
    end

    drop_if_exists(unique_index(:rooms, [:short_id], name: "rooms_unique_short_id_index"))

    alter table(:rooms) do
      remove(:short_id)
    end
  end
end
