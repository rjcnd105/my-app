import type { MaybeGetter } from "./types";
type SyncedArgs<T> = {
    value: MaybeGetter<T>;
    onChange?: (value: T) => void;
} | {
    value: MaybeGetter<T | undefined>;
    onChange?: (value: T) => void;
    defaultValue: T;
};
/**
 * Setting `current` calls the `onChange` callback with the new value.
 *
 * If the value arg is static, it will be used as the default value,
 * and subsequent sets will set an internal state that gets read as `current`.
 *
 * Otherwise, if it is a getter, it will be called every time `current` is read,
 * and no internal state is used.
 */
export declare class Synced<T> {
    #private;
    constructor({ value, onChange, ...args }: SyncedArgs<T>);
    get current(): T;
    set current(value: T);
}
export {};
