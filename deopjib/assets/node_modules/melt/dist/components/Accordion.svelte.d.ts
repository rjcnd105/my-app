import { Accordion as Builder, type AccordionProps } from "../builders/Accordion.svelte";
import { type Snippet } from "svelte";
import type { ComponentProps } from "../types";
declare class __sveltets_Render<Multiple extends boolean = false> {
    props(): Omit<ComponentProps<AccordionProps<Multiple>>, "multiple"> & {
        children: Snippet<[Builder<Multiple>]>;
        multiple?: Multiple | undefined;
    };
    events(): {};
    slots(): {};
    bindings(): "value";
    exports(): {
        accordion: Builder<Multiple>;
    };
}
interface $$IsomorphicComponent {
    new <Multiple extends boolean = false>(options: import('svelte').ComponentConstructorOptions<ReturnType<__sveltets_Render<Multiple>['props']>>): import('svelte').SvelteComponent<ReturnType<__sveltets_Render<Multiple>['props']>, ReturnType<__sveltets_Render<Multiple>['events']>, ReturnType<__sveltets_Render<Multiple>['slots']>> & {
        $$bindings?: ReturnType<__sveltets_Render<Multiple>['bindings']>;
    } & ReturnType<__sveltets_Render<Multiple>['exports']>;
    <Multiple extends boolean = false>(internal: unknown, props: ReturnType<__sveltets_Render<Multiple>['props']> & {}): ReturnType<__sveltets_Render<Multiple>['exports']>;
    z_$$bindings?: ReturnType<__sveltets_Render<any>['bindings']>;
}
declare const Accordion: $$IsomorphicComponent;
type Accordion<Multiple extends boolean = false> = InstanceType<typeof Accordion<Multiple>>;
export default Accordion;
