import { type Snippet } from "svelte";
import { Select as Builder, type SelectProps } from "../builders/Select.svelte";
import type { ComponentProps } from "../types";
declare class __sveltets_Render<T extends string, Multiple extends boolean> {
    props(): Omit<ComponentProps<SelectProps<T, Multiple>>, "multiple"> & {
        children: Snippet<[Builder<T, Multiple>]>;
        multiple?: Multiple | undefined;
    };
    events(): {};
    slots(): {};
    bindings(): "value";
    exports(): {
        select: Builder<T, Multiple>;
    };
}
interface $$IsomorphicComponent {
    new <T extends string, Multiple extends boolean>(options: import('svelte').ComponentConstructorOptions<ReturnType<__sveltets_Render<T, Multiple>['props']>>): import('svelte').SvelteComponent<ReturnType<__sveltets_Render<T, Multiple>['props']>, ReturnType<__sveltets_Render<T, Multiple>['events']>, ReturnType<__sveltets_Render<T, Multiple>['slots']>> & {
        $$bindings?: ReturnType<__sveltets_Render<T, Multiple>['bindings']>;
    } & ReturnType<__sveltets_Render<T, Multiple>['exports']>;
    <T extends string, Multiple extends boolean>(internal: unknown, props: ReturnType<__sveltets_Render<T, Multiple>['props']> & {}): ReturnType<__sveltets_Render<T, Multiple>['exports']>;
    z_$$bindings?: ReturnType<__sveltets_Render<any, any>['bindings']>;
}
declare const Select: $$IsomorphicComponent;
type Select<T extends string, Multiple extends boolean> = InstanceType<typeof Select<T, Multiple>>;
export default Select;
