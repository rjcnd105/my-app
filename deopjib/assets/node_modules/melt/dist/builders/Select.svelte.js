import { dataAttr } from "../utils/attribute";
import { extract } from "../utils/extract";
import { createBuilderMetadata } from "../utils/identifiers";
import { isHtmlElement } from "../utils/is";
import { kbd } from "../utils/keyboard";
import { pick } from "../utils/object";
import { SelectionState, } from "../utils/selection-state.svelte";
import { createTypeahead, letterRegex } from "../utils/typeahead.svelte";
import { tick } from "svelte";
import { BasePopover } from "./Popover.svelte";
const { dataAttrs, dataSelectors, createIds } = createBuilderMetadata("select", [
    "trigger",
    "content",
    "option",
]);
export class Select extends BasePopover {
    /* Props */
    #props;
    /* State */
    #value;
    multiple = $derived(extract(this.#props.multiple, false));
    highlighted = $state(null);
    typeaheadTimeout = $derived(extract(this.#props.typeaheadTimeout, 500));
    typeahead = $derived(createTypeahead({
        timeout: this.#props.typeaheadTimeout,
        getItems: () => {
            return this.#getOptionsEls().reduce((acc, curr) => {
                if (!curr.dataset.value)
                    return acc;
                return [
                    ...acc,
                    {
                        value: curr.dataset.value,
                        current: curr.dataset.value === this.highlighted,
                    },
                ];
            }, []);
        },
    }));
    constructor(props = {}) {
        super({
            sameWidth: true,
            ...props,
            onOpenChange: async (open) => {
                props.onOpenChange?.(open);
                await tick();
                if (!open) {
                    this.highlighted = null;
                    return;
                }
                if (!this.highlighted) {
                    const lastSelected = this.#value.toArray().at(-1);
                    if (lastSelected)
                        this.highlighted = lastSelected;
                    else
                        this.#highlightFirst();
                }
                const content = document.getElementById(this.ids.content);
                if (!content)
                    return;
                content.focus();
            },
        });
        this.#props = props;
        this.#value = new SelectionState({
            value: props.value,
            onChange: props.onValueChange,
            multiple: props.multiple,
        });
        const oldIds = this.ids;
        const newIds = createIds();
        this.ids = {
            ...oldIds,
            trigger: oldIds.invoker,
            content: oldIds.popover,
            option: newIds.option,
        };
    }
    get value() {
        return this.#value.current;
    }
    set value(value) {
        this.#value.current = value;
    }
    get valueAsString() {
        return this.#value.toArray().join(", ");
    }
    isSelected = (value) => {
        return this.#value.has(value);
    };
    select = (value) => {
        this.#value.toggle(value);
        if (this.multiple)
            return;
        this.open = false;
        tick().then(() => {
            document.getElementById(this.ids.trigger)?.focus();
        });
    };
    get trigger() {
        return Object.assign(super.getInvoker(), {
            [dataAttrs.trigger]: "",
            role: "combobox",
            "aria-expanded": this.open,
            "aria-controls": this.ids.content,
            "aria-owns": this.ids.content,
            onkeydown: (e) => {
                const kbdSubset = pick(kbd, "ARROW_DOWN", "ARROW_UP");
                if (Object.values(kbdSubset).includes(e.key))
                    e.preventDefault();
                switch (e.key) {
                    case kbdSubset.ARROW_DOWN: {
                        this.open = true;
                        tick().then(() => {
                            if (!this.value)
                                this.#highlightFirst();
                        });
                        break;
                    }
                    case kbdSubset.ARROW_UP: {
                        this.open = true;
                        tick().then(() => {
                            if (!this.value)
                                this.#highlightLast();
                        });
                        break;
                    }
                }
            },
        });
    }
    get content() {
        return Object.assign(super.getPopover(), {
            [dataAttrs.content]: "",
            role: "listbox",
            "aria-expanded": this.open,
            "aria-activedescendant": this.highlighted ? this.getOptionId(this.highlighted) : undefined,
            onkeydown: (e) => {
                const kbdSubset = pick(kbd, "HOME", "END", "ARROW_DOWN", "ARROW_UP", "ESCAPE", "ENTER", "SPACE");
                if (Object.values(kbdSubset).includes(e.key))
                    e.preventDefault();
                switch (e.key) {
                    case kbdSubset.HOME: {
                        this.#highlightFirst();
                        break;
                    }
                    case kbdSubset.END: {
                        this.#highlightLast();
                        break;
                    }
                    case kbdSubset.ARROW_DOWN: {
                        this.#highlightNext();
                        break;
                    }
                    case kbdSubset.ARROW_UP: {
                        this.#highlightPrev();
                        break;
                    }
                    case kbdSubset.SPACE:
                    case kbdSubset.ENTER: {
                        if (!this.highlighted)
                            break;
                        this.select(this.highlighted);
                        break;
                    }
                    case kbdSubset.ESCAPE: {
                        this.open = false;
                        tick().then(() => {
                            document.getElementById(this.ids.trigger)?.focus();
                        });
                        break;
                    }
                    default: {
                        if (!letterRegex.test(e.key))
                            break;
                        e.preventDefault();
                        const next = this.typeahead(e.key);
                        if (next)
                            this.highlighted = next.value;
                    }
                }
            },
        });
    }
    getOptionId(value) {
        return `${this.ids.content}-option-${dataAttr(value)}`;
    }
    getOption(value) {
        return {
            [dataAttrs.option]: "",
            "data-value": dataAttr(value),
            "aria-hidden": this.open ? undefined : true,
            "aria-selected": this.#value.has(value),
            "data-highlighted": dataAttr(this.highlighted === value),
            role: "option",
            onmouseover: () => {
                this.highlighted = value;
            },
            onclick: () => {
                this.select(value);
            },
        };
    }
    #getOptionsEls() {
        const contentEl = document.getElementById(this.ids.content);
        if (!contentEl)
            return [];
        return [...contentEl.querySelectorAll(dataSelectors.option)].filter(isHtmlElement);
    }
    #highlight(el) {
        if (!el.dataset.value)
            return;
        this.highlighted = el.dataset.value;
    }
    #highlightNext() {
        const options = this.#getOptionsEls();
        const current = options.find((o) => o.dataset.value === this.highlighted);
        const next = current?.nextElementSibling ?? options[0];
        if (isHtmlElement(next))
            this.#highlight(next);
    }
    #highlightPrev() {
        const options = this.#getOptionsEls();
        const current = options.find((o) => o.dataset.value === this.highlighted);
        const prev = current?.previousElementSibling ?? options.at(-1);
        if (isHtmlElement(prev))
            this.#highlight(prev);
    }
    #highlightFirst() {
        const first = this.#getOptionsEls()[0];
        if (first)
            this.#highlight(first);
    }
    #highlightLast() {
        const last = this.#getOptionsEls().at(-1);
        if (last)
            this.#highlight(last);
    }
}
