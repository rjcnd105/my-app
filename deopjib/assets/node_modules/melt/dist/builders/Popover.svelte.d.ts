import type { MaybeGetter } from "../types";
import { type ComputePositionConfig, type Placement } from "@floating-ui/dom";
export type CloseOnOutsideClickCheck = (el: Element | Window | Document) => boolean;
type CloseOnOutsideClickProp = MaybeGetter<boolean | CloseOnOutsideClickCheck | undefined>;
export declare const isCloseOnOutsideClickCheck: (value: CloseOnOutsideClickProp) => value is CloseOnOutsideClickCheck;
export type PopoverProps = {
    /**
     * If the Popover is open.
     *
     * When passing a getter, it will be used as source of truth,
     * meaning that the value only changes when the getter returns a new value.
     *
     * Otherwise, if passing a static value, it'll serve as the default value.
     *
     *
     * @default false
     */
    open?: MaybeGetter<boolean | undefined>;
    /**
     * Called when the value is supposed to change.
     */
    onOpenChange?: (value: boolean) => void;
    /**
     * If the popover visibility should be controlled by the user.
     *
     * @default false
     */
    forceVisible?: MaybeGetter<boolean | undefined>;
    /**
     * Options to be passed to Floating UI's `computePosition`
     *
     * @see https://floating-ui.com/docs/computePosition
     */
    computePositionOptions?: MaybeGetter<Partial<ComputePositionConfig> | undefined>;
    /**
     * If the popover should have the same width as the trigger
     *
     * @default false
     */
    sameWidth?: MaybeGetter<boolean | undefined>;
    /**
     * If the popover should close when clicking escape.
     *
     * @default true
     */
    closeOnEscape?: MaybeGetter<boolean | undefined>;
    /**
     * If the popover should close when clicking outside.
     * Alternatively, accepts a function that receives the clicked element,
     * and returns if the popover should close.
     *
     * @default true
     */
    closeOnOutsideClick?: CloseOnOutsideClickProp;
};
export declare class BasePopover {
    #private;
    ids: {
        invoker: string;
        popover: string;
    };
    forceVisible: boolean;
    computePositionOptions: {} | Partial<{
        placement?: Placement | undefined;
        strategy?: import("@floating-ui/dom").Strategy | undefined;
        middleware?: Array<import("@floating-ui/dom").Middleware | null | undefined | false> | undefined;
        platform?: import("@floating-ui/dom").Platform | undefined;
    }>;
    closeOnEscape: boolean;
    sameWidth: boolean;
    closeOnOutsideClick: boolean | CloseOnOutsideClickCheck;
    constructor(props?: PopoverProps);
    get open(): boolean;
    set open(value: boolean);
    protected get sharedProps(): {
        onfocusout: () => Promise<void>;
    };
    /** The trigger that toggles the value. */
    protected getInvoker(): {
        readonly onfocusout: () => Promise<void>;
        readonly id: string;
        readonly popovertarget: string;
        readonly onclick: (e: Event) => void;
    };
    protected getPopover(): {
        readonly onfocusout: () => Promise<void>;
        readonly id: string;
        readonly popover: "manual";
        readonly ontoggle: (e: ToggleEvent & {
            currentTarget: EventTarget & HTMLElement;
        }) => void;
        readonly tabindex: -1;
        readonly inert: boolean;
        readonly "data-open": "" | undefined;
    };
}
export declare class Popover extends BasePopover {
    ids: BasePopover["ids"] & {
        trigger: string;
        content: string;
    };
    constructor(props?: PopoverProps);
    /** The trigger that toggles the value. */
    get trigger(): {
        readonly onfocusout: () => Promise<void>;
        readonly id: string;
        readonly popovertarget: string;
        readonly onclick: (e: Event) => void;
    } & {
        "data-melt-popover-trigger": string;
    };
    get content(): {
        readonly onfocusout: () => Promise<void>;
        readonly id: string;
        readonly popover: "manual";
        readonly ontoggle: (e: ToggleEvent & {
            currentTarget: EventTarget & HTMLElement;
        }) => void;
        readonly tabindex: -1;
        readonly inert: boolean;
        readonly "data-open": "" | undefined;
    } & {
        "data-melt-popover-content": string;
    };
}
export {};
