// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from './client';
import type { GetApiJsonPayItemData, GetApiJsonPayItemResponses, GetApiJsonPayItemErrors, PostApiJsonPayItemData, PostApiJsonPayItemResponses, PostApiJsonPayItemErrors, PostApiJsonPayItemUpsertFromWordsData, PostApiJsonPayItemUpsertFromWordsResponses, PostApiJsonPayItemUpsertFromWordsErrors, GetApiJsonPayersData, GetApiJsonPayersResponses, GetApiJsonPayersErrors, GetApiJsonRoomsData, GetApiJsonRoomsResponses, GetApiJsonRoomsErrors, GetApiJsonRoomsByIdByIdData, GetApiJsonRoomsByIdByIdResponses, GetApiJsonRoomsByIdByIdErrors, GetApiJsonRoomsByShortIdByShortIdData, GetApiJsonRoomsByShortIdByShortIdResponses, GetApiJsonRoomsByShortIdByShortIdErrors, PatchApiJsonRoomsNameData, PatchApiJsonRoomsNameResponses, PatchApiJsonRoomsNameErrors, PostApiJsonRoomsUpsertWithPayersData, PostApiJsonRoomsUpsertWithPayersResponses, PostApiJsonRoomsUpsertWithPayersErrors, GetApiJsonRoomsByIdPayersData, GetApiJsonRoomsByIdPayersResponses, GetApiJsonRoomsByIdPayersErrors } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * /pay_item operation on pay_item resource
 */
export const getApiJsonPayItem = <ThrowOnError extends boolean = false>(options?: Options<GetApiJsonPayItemData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetApiJsonPayItemResponses, GetApiJsonPayItemErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/json/pay_item',
        ...options
    });
};

/**
 * /pay_item operation on pay_item resource
 */
export const postApiJsonPayItem = <ThrowOnError extends boolean = false>(options?: Options<PostApiJsonPayItemData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostApiJsonPayItemResponses, PostApiJsonPayItemErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/json/pay_item',
        ...options,
        headers: {
            'Content-Type': 'application/vnd.api+json',
            ...options?.headers
        }
    });
};

/**
 * /pay_item/upsert_from_words operation on pay_item resource
 */
export const postApiJsonPayItemUpsertFromWords = <ThrowOnError extends boolean = false>(options?: Options<PostApiJsonPayItemUpsertFromWordsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostApiJsonPayItemUpsertFromWordsResponses, PostApiJsonPayItemUpsertFromWordsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/json/pay_item/upsert_from_words',
        ...options,
        headers: {
            'Content-Type': 'application/vnd.api+json',
            ...options?.headers
        }
    });
};

/**
 * /payers operation on payer resource
 */
export const getApiJsonPayers = <ThrowOnError extends boolean = false>(options?: Options<GetApiJsonPayersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetApiJsonPayersResponses, GetApiJsonPayersErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/json/payers',
        ...options
    });
};

/**
 * /rooms operation on room resource
 */
export const getApiJsonRooms = <ThrowOnError extends boolean = false>(options?: Options<GetApiJsonRoomsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetApiJsonRoomsResponses, GetApiJsonRoomsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/json/rooms',
        ...options
    });
};

/**
 * /rooms/by_id/:id operation on room resource
 */
export const getApiJsonRoomsByIdById = <ThrowOnError extends boolean = false>(options: Options<GetApiJsonRoomsByIdByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetApiJsonRoomsByIdByIdResponses, GetApiJsonRoomsByIdByIdErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/json/rooms/by_id/{id}',
        ...options
    });
};

/**
 * /rooms/by_short_id/:short_id operation on room resource
 */
export const getApiJsonRoomsByShortIdByShortId = <ThrowOnError extends boolean = false>(options: Options<GetApiJsonRoomsByShortIdByShortIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetApiJsonRoomsByShortIdByShortIdResponses, GetApiJsonRoomsByShortIdByShortIdErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/json/rooms/by_short_id/{short_id}',
        ...options
    });
};

/**
 * /rooms/name operation on room resource
 */
export const patchApiJsonRoomsName = <ThrowOnError extends boolean = false>(options?: Options<PatchApiJsonRoomsNameData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).patch<PatchApiJsonRoomsNameResponses, PatchApiJsonRoomsNameErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/json/rooms/name',
        ...options,
        headers: {
            'Content-Type': 'application/vnd.api+json',
            ...options?.headers
        }
    });
};

/**
 * /rooms/upsert_with_payers operation on room resource
 */
export const postApiJsonRoomsUpsertWithPayers = <ThrowOnError extends boolean = false>(options?: Options<PostApiJsonRoomsUpsertWithPayersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostApiJsonRoomsUpsertWithPayersResponses, PostApiJsonRoomsUpsertWithPayersErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/json/rooms/upsert_with_payers',
        ...options,
        headers: {
            'Content-Type': 'application/vnd.api+json',
            ...options?.headers
        }
    });
};

/**
 * /rooms/:id/payers operation on payer resource
 */
export const getApiJsonRoomsByIdPayers = <ThrowOnError extends boolean = false>(options: Options<GetApiJsonRoomsByIdPayersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetApiJsonRoomsByIdPayersResponses, GetApiJsonRoomsByIdPayersErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/json/rooms/{id}/payers',
        ...options
    });
};