// This file is auto-generated by @hey-api/openapi-ts

import { z } from "zod";

export const zLinks = z.object({});

export const zError = z.object({
  code: z.optional(z.string()),
  detail: z.optional(z.string()),
  id: z.optional(z.string()),
  links: z.optional(zLinks),
  source: z.optional(
    z.object({
      parameter: z.optional(z.string()),
      pointer: z.optional(z.string()),
    }),
  ),
  status: z.optional(z.string()),
  title: z.optional(z.string()),
});

export const zErrors = z.array(zError);

/**
 * A link MUST be represented as either: a string containing the link's URL or a link object.
 */
export const zLink = z.string();

/**
 * A "Resource object" representing a pay_item
 */
export const zPayItem = z.object({
  attributes: z.optional(
    z.object({
      amount: z.optional(z.union([z.union([z.int(), z.null()]), z.unknown()])),
      name: z.optional(z.union([z.union([z.string(), z.null()]), z.unknown()])),
      room_id: z.optional(
        z.union([z.union([z.uuid(), z.null()]), z.unknown()]),
      ),
      settled_id: z.uuid(),
    }),
  ),
  id: z.string(),
  relationships: z.optional(
    z.object({
      excluded_payers: z.optional(
        z.object({
          data: z.optional(
            z.array(
              z.object({
                id: z.string(),
                meta: z.optional(z.object({})),
                type: z.string(),
              }),
            ),
          ),
        }),
      ),
      room: z.optional(
        z.object({
          data: z.optional(
            z.union([
              z.object({
                id: z.string(),
                meta: z.optional(z.object({})),
                type: z.string(),
              }),
              z.null(),
            ]),
          ),
        }),
      ),
      settler: z.optional(
        z.object({
          data: z.optional(
            z.union([
              z.object({
                id: z.string(),
                meta: z.optional(z.object({})),
                type: z.string(),
              }),
              z.null(),
            ]),
          ),
        }),
      ),
    }),
  ),
  type: z.string(),
});

/**
 * Filters the query to results matching the given filter object
 */
export const zPayItemFilter = z.unknown();

export const zPayItemFilterAmount = z.object({
  eq: z.optional(z.int()),
  greater_than: z.optional(z.int()),
  greater_than_or_equal: z.optional(z.int()),
  in: z.optional(z.array(z.int())),
  is_nil: z.optional(z.boolean()),
  less_than: z.optional(z.int()),
  less_than_or_equal: z.optional(z.int()),
  not_eq: z.optional(z.int()),
});

export const zPayItemFilterId = z.object({
  eq: z.optional(z.uuid()),
  greater_than: z.optional(z.uuid()),
  greater_than_or_equal: z.optional(z.uuid()),
  in: z.optional(z.array(z.uuid())),
  is_nil: z.optional(z.boolean()),
  less_than: z.optional(z.uuid()),
  less_than_or_equal: z.optional(z.uuid()),
  not_eq: z.optional(z.uuid()),
});

export const zPayItemFilterName = z.object({
  contains: z.optional(z.string()),
  eq: z.optional(z.string()),
  greater_than: z.optional(z.string()),
  greater_than_or_equal: z.optional(z.string()),
  ilike: z.optional(z.string()),
  in: z.optional(z.array(z.string())),
  is_nil: z.optional(z.boolean()),
  less_than: z.optional(z.string()),
  less_than_or_equal: z.optional(z.string()),
  like: z.optional(z.string()),
  not_eq: z.optional(z.string()),
});

export const zPayItemFilterRoomId = z.object({
  eq: z.optional(z.uuid()),
  greater_than: z.optional(z.uuid()),
  greater_than_or_equal: z.optional(z.uuid()),
  in: z.optional(z.array(z.uuid())),
  is_nil: z.optional(z.boolean()),
  less_than: z.optional(z.uuid()),
  less_than_or_equal: z.optional(z.uuid()),
  not_eq: z.optional(z.uuid()),
});

export const zPayItemFilterSettledId = z.object({
  eq: z.optional(z.uuid()),
  greater_than: z.optional(z.uuid()),
  greater_than_or_equal: z.optional(z.uuid()),
  in: z.optional(z.array(z.uuid())),
  is_nil: z.optional(z.boolean()),
  less_than: z.optional(z.uuid()),
  less_than_or_equal: z.optional(z.uuid()),
  not_eq: z.optional(z.uuid()),
});

/**
 * A "Resource object" representing a pay_item_excluded_payer
 */
export const zPayItemExcludedPayer = z.object({
  attributes: z.optional(
    z.object({
      pay_item_id: z.uuid(),
      payer_id: z.uuid(),
    }),
  ),
  id: z.string(),
  relationships: z.optional(
    z.object({
      pay_item: z.optional(
        z.object({
          data: z.optional(
            z.union([
              z.object({
                id: z.string(),
                meta: z.optional(z.object({})),
                type: z.string(),
              }),
              z.null(),
            ]),
          ),
        }),
      ),
      payer: z.optional(
        z.object({
          data: z.optional(
            z.union([
              z.object({
                id: z.string(),
                meta: z.optional(z.object({})),
                type: z.string(),
              }),
              z.null(),
            ]),
          ),
        }),
      ),
    }),
  ),
  type: z.string(),
});

/**
 * A "Resource object" representing a payer
 */
export const zPayer = z.object({
  attributes: z.optional(
    z.object({
      banc_account: z.optional(
        z.union([z.union([z.string(), z.null()]), z.unknown()]),
      ),
      name: z.string(),
      room_id: z.optional(
        z.union([z.union([z.uuid(), z.null()]), z.unknown()]),
      ),
    }),
  ),
  id: z.string(),
  relationships: z.optional(
    z.object({
      room: z.optional(
        z.object({
          data: z.optional(
            z.union([
              z.object({
                id: z.string(),
                meta: z.optional(z.object({})),
                type: z.string(),
              }),
              z.null(),
            ]),
          ),
        }),
      ),
      settled_items: z.optional(
        z.object({
          data: z.optional(
            z.array(
              z.object({
                id: z.string(),
                meta: z.optional(z.object({})),
                type: z.string(),
              }),
            ),
          ),
        }),
      ),
    }),
  ),
  type: z.string(),
});

/**
 * Filters the query to results matching the given filter object
 */
export const zPayerFilter = z.unknown();

export const zPayerFilterBancAccount = z.object({
  contains: z.optional(z.string()),
  eq: z.optional(z.string()),
  greater_than: z.optional(z.string()),
  greater_than_or_equal: z.optional(z.string()),
  ilike: z.optional(z.string()),
  in: z.optional(z.array(z.string())),
  is_nil: z.optional(z.boolean()),
  less_than: z.optional(z.string()),
  less_than_or_equal: z.optional(z.string()),
  like: z.optional(z.string()),
  not_eq: z.optional(z.string()),
});

export const zPayerFilterId = z.object({
  eq: z.optional(z.uuid()),
  greater_than: z.optional(z.uuid()),
  greater_than_or_equal: z.optional(z.uuid()),
  in: z.optional(z.array(z.uuid())),
  is_nil: z.optional(z.boolean()),
  less_than: z.optional(z.uuid()),
  less_than_or_equal: z.optional(z.uuid()),
  not_eq: z.optional(z.uuid()),
});

export const zPayerFilterName = z.object({
  contains: z.optional(z.string()),
  eq: z.optional(z.string()),
  greater_than: z.optional(z.string()),
  greater_than_or_equal: z.optional(z.string()),
  ilike: z.optional(z.string()),
  in: z.optional(z.array(z.string())),
  is_nil: z.optional(z.boolean()),
  less_than: z.optional(z.string()),
  less_than_or_equal: z.optional(z.string()),
  like: z.optional(z.string()),
  not_eq: z.optional(z.string()),
});

export const zPayerFilterRoomId = z.object({
  eq: z.optional(z.uuid()),
  greater_than: z.optional(z.uuid()),
  greater_than_or_equal: z.optional(z.uuid()),
  in: z.optional(z.array(z.uuid())),
  is_nil: z.optional(z.boolean()),
  less_than: z.optional(z.uuid()),
  less_than_or_equal: z.optional(z.uuid()),
  not_eq: z.optional(z.uuid()),
});

/**
 * A "Resource object" representing a room
 */
export const zRoom = z.object({
  attributes: z.optional(
    z.object({
      counts_of_payers: z.optional(z.union([z.int(), z.unknown()])),
      expiration_at: z.optional(
        z.union([z.union([z.iso.datetime(), z.null()]), z.unknown()]),
      ),
      name: z.string(),
      short_id: z.optional(
        z.union([z.union([z.string(), z.null()]), z.unknown()]),
      ),
      updated_at: z.unknown(),
    }),
  ),
  id: z.string(),
  relationships: z.optional(
    z.object({
      payers: z.optional(
        z.object({
          data: z.optional(
            z.array(
              z.object({
                id: z.string(),
                meta: z.optional(z.object({})),
                type: z.string(),
              }),
            ),
          ),
        }),
      ),
    }),
  ),
  type: z.string(),
});

/**
 * Filters the query to results matching the given filter object
 */
export const zRoomFilter = z.unknown();

export const zRoomFilterCountsOfPayers = z.object({
  eq: z.optional(z.int()),
  greater_than: z.optional(z.int()),
  greater_than_or_equal: z.optional(z.int()),
  in: z.optional(z.array(z.int())),
  is_nil: z.optional(z.boolean()),
  less_than: z.optional(z.int()),
  less_than_or_equal: z.optional(z.int()),
  not_eq: z.optional(z.int()),
});

export const zRoomFilterExpirationAt = z.object({
  eq: z.optional(z.iso.datetime()),
  greater_than: z.optional(z.iso.datetime()),
  greater_than_or_equal: z.optional(z.iso.datetime()),
  in: z.optional(z.array(z.iso.datetime())),
  is_nil: z.optional(z.boolean()),
  less_than: z.optional(z.iso.datetime()),
  less_than_or_equal: z.optional(z.iso.datetime()),
  not_eq: z.optional(z.iso.datetime()),
});

export const zRoomFilterId = z.object({
  eq: z.optional(z.uuid()),
  greater_than: z.optional(z.uuid()),
  greater_than_or_equal: z.optional(z.uuid()),
  in: z.optional(z.array(z.uuid())),
  is_nil: z.optional(z.boolean()),
  less_than: z.optional(z.uuid()),
  less_than_or_equal: z.optional(z.uuid()),
  not_eq: z.optional(z.uuid()),
});

export const zRoomFilterName = z.object({
  contains: z.optional(z.string()),
  eq: z.optional(z.string()),
  greater_than: z.optional(z.string()),
  greater_than_or_equal: z.optional(z.string()),
  ilike: z.optional(z.string()),
  in: z.optional(z.array(z.string())),
  is_nil: z.optional(z.boolean()),
  less_than: z.optional(z.string()),
  less_than_or_equal: z.optional(z.string()),
  like: z.optional(z.string()),
  not_eq: z.optional(z.string()),
});

export const zRoomFilterShortId = z.object({
  contains: z.optional(z.string()),
  eq: z.optional(z.string()),
  greater_than: z.optional(z.string()),
  greater_than_or_equal: z.optional(z.string()),
  ilike: z.optional(z.string()),
  in: z.optional(z.array(z.string())),
  is_nil: z.optional(z.boolean()),
  less_than: z.optional(z.string()),
  less_than_or_equal: z.optional(z.string()),
  like: z.optional(z.string()),
  not_eq: z.optional(z.string()),
});

export const zRoomFilterUpdatedAt = z.object({
  eq: z.optional(z.unknown()),
  greater_than: z.optional(z.unknown()),
  greater_than_or_equal: z.optional(z.unknown()),
  in: z.optional(z.array(z.unknown())),
  is_nil: z.optional(z.boolean()),
  less_than: z.optional(z.unknown()),
  less_than_or_equal: z.optional(z.unknown()),
  not_eq: z.optional(z.unknown()),
});

export const zGetApiJsonPayItemData = z.object({
  body: z.optional(z.never()),
  path: z.optional(z.never()),
  query: z.optional(
    z.object({
      filter: z.optional(zPayItemFilter),
      sort: z.optional(
        z
          .string()
          .regex(
            /^(id|-id|\+\+id|--id|name|-name|\+\+name|--name|amount|-amount|\+\+amount|--amount|room_id|-room_id|\+\+room_id|--room_id|settled_id|-settled_id|\+\+settled_id|--settled_id)(,(id|-id|\+\+id|--id|name|-name|\+\+name|--name|amount|-amount|\+\+amount|--amount|room_id|-room_id|\+\+room_id|--room_id|settled_id|-settled_id|\+\+settled_id|--settled_id))*$/,
          ),
      ),
      page: z.optional(
        z.object({
          after: z.optional(z.string()),
          before: z.optional(z.string()),
          count: z.optional(z.boolean()).default(false),
          limit: z.optional(z.int().gte(1)),
          offset: z.optional(z.int().gte(0)),
        }),
      ),
      include: z.optional(
        z
          .string()
          .regex(/^(settler|excluded_payers)(,(settler|excluded_payers))*$/),
      ),
      fields: z.optional(
        z.object({
          pay_item: z.optional(z.string()),
        }),
      ),
    }),
  ),
});

/**
 * Success
 */
export const zGetApiJsonPayItemResponse = z.object({
  data: z.optional(z.array(zPayItem)),
  included: z.optional(z.array(zPayer)),
  meta: z.optional(z.object({})),
});

export const zPostApiJsonPayItemData = z.object({
  body: z.optional(
    z.object({
      data: z.object({
        attributes: z.optional(z.object({})),
        relationships: z.optional(z.object({})),
        type: z.optional(z.enum(["pay_item"])),
      }),
    }),
  ),
  path: z.optional(z.never()),
  query: z.optional(
    z.object({
      include: z.optional(
        z
          .string()
          .regex(/^(settler|excluded_payers)(,(settler|excluded_payers))*$/),
      ),
      fields: z.optional(
        z.object({
          pay_item: z.optional(z.string()),
        }),
      ),
    }),
  ),
});

/**
 * Success
 */
export const zPostApiJsonPayItemResponse = z.object({
  data: z.optional(zPayItem),
  included: z.optional(z.array(zPayer)),
  meta: z.optional(z.object({})),
});

export const zPostApiJsonPayItemUpsertFromWordsData = z.object({
  body: z.optional(
    z.object({
      data: z.object({
        attributes: z.optional(
          z.object({
            words: z.optional(z.union([z.string(), z.unknown()])),
          }),
        ),
        relationships: z.optional(z.object({})),
        type: z.optional(z.enum(["pay_item"])),
      }),
    }),
  ),
  path: z.optional(z.never()),
  query: z.optional(
    z.object({
      include: z.optional(
        z
          .string()
          .regex(/^(settler|excluded_payers)(,(settler|excluded_payers))*$/),
      ),
      fields: z.optional(
        z.object({
          pay_item: z.optional(z.string()),
        }),
      ),
    }),
  ),
});

/**
 * Success
 */
export const zPostApiJsonPayItemUpsertFromWordsResponse = z.object({
  data: z.optional(zPayItem),
  included: z.optional(z.array(zPayer)),
  meta: z.optional(z.object({})),
});

export const zGetApiJsonPayersData = z.object({
  body: z.optional(z.never()),
  path: z.optional(z.never()),
  query: z.optional(
    z.object({
      filter: z.optional(zPayerFilter),
      sort: z.optional(
        z
          .string()
          .regex(
            /^(id|-id|\+\+id|--id|name|-name|\+\+name|--name|banc_account|-banc_account|\+\+banc_account|--banc_account|room_id|-room_id|\+\+room_id|--room_id)(,(id|-id|\+\+id|--id|name|-name|\+\+name|--name|banc_account|-banc_account|\+\+banc_account|--banc_account|room_id|-room_id|\+\+room_id|--room_id))*$/,
          ),
      ),
      page: z.optional(
        z.object({
          after: z.optional(z.string()),
          before: z.optional(z.string()),
          count: z.optional(z.boolean()).default(false),
          limit: z.optional(z.int().gte(1)),
          offset: z.optional(z.int().gte(0)),
        }),
      ),
      include: z.optional(
        z.string().regex(/^(room|settled_items)(,(room|settled_items))*$/),
      ),
      fields: z.optional(
        z.object({
          payer: z.optional(z.string()),
        }),
      ),
    }),
  ),
});

/**
 * Success
 */
export const zGetApiJsonPayersResponse = z.object({
  data: z.optional(z.array(zPayer)),
  included: z.optional(z.array(z.union([zRoom, zPayItem]))),
  meta: z.optional(z.object({})),
});

export const zGetApiJsonRoomsData = z.object({
  body: z.optional(z.never()),
  path: z.optional(z.never()),
  query: z.optional(
    z.object({
      filter: z.optional(zRoomFilter),
      sort: z.optional(
        z
          .string()
          .regex(
            /^(id|-id|\+\+id|--id|short_id|-short_id|\+\+short_id|--short_id|name|-name|\+\+name|--name|expiration_at|-expiration_at|\+\+expiration_at|--expiration_at|updated_at|-updated_at|\+\+updated_at|--updated_at|counts_of_payers|-counts_of_payers|\+\+counts_of_payers|--counts_of_payers)(,(id|-id|\+\+id|--id|short_id|-short_id|\+\+short_id|--short_id|name|-name|\+\+name|--name|expiration_at|-expiration_at|\+\+expiration_at|--expiration_at|updated_at|-updated_at|\+\+updated_at|--updated_at|counts_of_payers|-counts_of_payers|\+\+counts_of_payers|--counts_of_payers))*$/,
          ),
      ),
      include: z.optional(z.string().regex(/^(payers)(,(payers))*$/)),
      fields: z.optional(
        z.object({
          room: z.optional(z.string()),
        }),
      ),
    }),
  ),
});

/**
 * Success
 */
export const zGetApiJsonRoomsResponse = z.object({
  data: z.optional(z.array(zRoom)),
  included: z.optional(z.array(zPayer)),
  meta: z.optional(z.object({})),
});

export const zGetApiJsonRoomsByIdByIdData = z.object({
  body: z.optional(z.never()),
  path: z.object({
    id: z.uuid(),
  }),
  query: z.optional(
    z.object({
      include: z.optional(z.string().regex(/^(payers)(,(payers))*$/)),
      fields: z.optional(
        z.object({
          room: z.optional(z.string()),
        }),
      ),
    }),
  ),
});

/**
 * Success
 */
export const zGetApiJsonRoomsByIdByIdResponse = z.object({
  data: z.optional(zRoom),
  included: z.optional(z.array(zPayer)),
  meta: z.optional(z.object({})),
});

export const zGetApiJsonRoomsByShortIdByShortIdData = z.object({
  body: z.optional(z.never()),
  path: z.object({
    short_id: z.string(),
  }),
  query: z.optional(
    z.object({
      include: z.optional(z.string().regex(/^(payers)(,(payers))*$/)),
      fields: z.optional(
        z.object({
          room: z.optional(z.string()),
        }),
      ),
    }),
  ),
});

/**
 * Success
 */
export const zGetApiJsonRoomsByShortIdByShortIdResponse = z.object({
  data: z.optional(zRoom),
  included: z.optional(z.array(zPayer)),
  meta: z.optional(z.object({})),
});

export const zPatchApiJsonRoomsNameData = z.object({
  body: z.optional(
    z.object({
      data: z.object({
        attributes: z.optional(
          z.object({
            name: z.optional(z.union([z.string(), z.unknown()])),
          }),
        ),
        id: z.string(),
        relationships: z.optional(z.object({})),
        type: z.optional(z.enum(["room"])),
      }),
    }),
  ),
  path: z.optional(z.never()),
  query: z.optional(
    z.object({
      include: z.optional(z.string().regex(/^(payers)(,(payers))*$/)),
      fields: z.optional(
        z.object({
          room: z.optional(z.string()),
        }),
      ),
    }),
  ),
});

/**
 * Success
 */
export const zPatchApiJsonRoomsNameResponse = z.object({
  data: z.optional(zRoom),
  included: z.optional(z.array(zPayer)),
  meta: z.optional(z.object({})),
});

export const zPostApiJsonRoomsUpsertWithPayersData = z.object({
  body: z.optional(
    z.object({
      data: z.object({
        attributes: z.optional(
          z.object({
            id: z.optional(z.union([z.uuid(), z.unknown()])),
          }),
        ),
        relationships: z.optional(
          z.object({
            payers: z.optional(
              z.object({
                data: z.optional(
                  z.array(
                    z.object({
                      id: z.string(),
                      meta: z.optional(z.object({})),
                      type: z.string(),
                    }),
                  ),
                ),
                links: z.optional(z.object({})),
              }),
            ),
          }),
        ),
        type: z.optional(z.enum(["room"])),
      }),
    }),
  ),
  path: z.optional(z.never()),
  query: z.optional(
    z.object({
      include: z.optional(z.string().regex(/^(payers)(,(payers))*$/)),
      fields: z.optional(
        z.object({
          room: z.optional(z.string()),
        }),
      ),
    }),
  ),
});

/**
 * Success
 */
export const zPostApiJsonRoomsUpsertWithPayersResponse = z.object({
  data: z.optional(zRoom),
  included: z.optional(z.array(zPayer)),
  meta: z.optional(z.object({})),
});

export const zGetApiJsonRoomsByIdPayersData = z.object({
  body: z.optional(z.never()),
  path: z.object({
    id: z.string(),
  }),
  query: z.optional(
    z.object({
      include: z.optional(
        z.string().regex(/^(room|settled_items)(,(room|settled_items))*$/),
      ),
      fields: z.optional(
        z.object({
          payer: z.optional(z.string()),
        }),
      ),
    }),
  ),
});

/**
 * Success
 */
export const zGetApiJsonRoomsByIdPayersResponse = z.object({
  data: z.optional(zPayer),
  included: z.optional(z.array(z.union([zRoom, zPayItem]))),
  meta: z.optional(z.object({})),
});
