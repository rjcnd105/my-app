// This file is auto-generated by @hey-api/openapi-ts

import * as v from 'valibot';

export const vLinks = v.object({});

export const vError = v.object({
    code: v.optional(v.string()),
    detail: v.optional(v.string()),
    id: v.optional(v.string()),
    links: v.optional(vLinks),
    source: v.optional(v.object({
        parameter: v.optional(v.string()),
        pointer: v.optional(v.string())
    })),
    status: v.optional(v.string()),
    title: v.optional(v.string())
});

export const vErrors = v.array(vError);

/**
 * A link MUST be represented as either: a string containing the link's URL or a link object.
 */
export const vLink = v.string();

/**
 * A "Resource object" representing a pay_item
 */
export const vPayItem = v.object({
    attributes: v.optional(v.object({
        amount: v.optional(v.union([
            v.union([
                v.pipe(v.number(), v.integer()),
                v.null()
            ]),
            v.unknown()
        ])),
        name: v.optional(v.union([
            v.union([
                v.string(),
                v.null()
            ]),
            v.unknown()
        ])),
        room_id: v.optional(v.union([
            v.union([
                v.pipe(v.string(), v.uuid()),
                v.null()
            ]),
            v.unknown()
        ])),
        settled_id: v.pipe(v.string(), v.uuid())
    })),
    id: v.string(),
    relationships: v.optional(v.object({
        excluded_payers: v.optional(v.object({
            data: v.optional(v.array(v.object({
                id: v.string(),
                meta: v.optional(v.object({})),
                type: v.string()
            })))
        })),
        room: v.optional(v.object({
            data: v.optional(v.union([
                v.object({
                    id: v.string(),
                    meta: v.optional(v.object({})),
                    type: v.string()
                }),
                v.null()
            ]))
        })),
        settler: v.optional(v.object({
            data: v.optional(v.union([
                v.object({
                    id: v.string(),
                    meta: v.optional(v.object({})),
                    type: v.string()
                }),
                v.null()
            ]))
        }))
    })),
    type: v.string()
});

/**
 * Filters the query to results matching the given filter object
 */
export const vPayItemFilter = v.unknown();

export const vPayItemFilterAmount = v.object({
    eq: v.optional(v.pipe(v.number(), v.integer())),
    greater_than: v.optional(v.pipe(v.number(), v.integer())),
    greater_than_or_equal: v.optional(v.pipe(v.number(), v.integer())),
    in: v.optional(v.array(v.pipe(v.number(), v.integer()))),
    is_nil: v.optional(v.boolean()),
    less_than: v.optional(v.pipe(v.number(), v.integer())),
    less_than_or_equal: v.optional(v.pipe(v.number(), v.integer())),
    not_eq: v.optional(v.pipe(v.number(), v.integer()))
});

export const vPayItemFilterId = v.object({
    eq: v.optional(v.pipe(v.string(), v.uuid())),
    greater_than: v.optional(v.pipe(v.string(), v.uuid())),
    greater_than_or_equal: v.optional(v.pipe(v.string(), v.uuid())),
    in: v.optional(v.array(v.pipe(v.string(), v.uuid()))),
    is_nil: v.optional(v.boolean()),
    less_than: v.optional(v.pipe(v.string(), v.uuid())),
    less_than_or_equal: v.optional(v.pipe(v.string(), v.uuid())),
    not_eq: v.optional(v.pipe(v.string(), v.uuid()))
});

export const vPayItemFilterName = v.object({
    contains: v.optional(v.string()),
    eq: v.optional(v.string()),
    greater_than: v.optional(v.string()),
    greater_than_or_equal: v.optional(v.string()),
    ilike: v.optional(v.string()),
    in: v.optional(v.array(v.string())),
    is_nil: v.optional(v.boolean()),
    less_than: v.optional(v.string()),
    less_than_or_equal: v.optional(v.string()),
    like: v.optional(v.string()),
    not_eq: v.optional(v.string())
});

export const vPayItemFilterRoomId = v.object({
    eq: v.optional(v.pipe(v.string(), v.uuid())),
    greater_than: v.optional(v.pipe(v.string(), v.uuid())),
    greater_than_or_equal: v.optional(v.pipe(v.string(), v.uuid())),
    in: v.optional(v.array(v.pipe(v.string(), v.uuid()))),
    is_nil: v.optional(v.boolean()),
    less_than: v.optional(v.pipe(v.string(), v.uuid())),
    less_than_or_equal: v.optional(v.pipe(v.string(), v.uuid())),
    not_eq: v.optional(v.pipe(v.string(), v.uuid()))
});

export const vPayItemFilterSettledId = v.object({
    eq: v.optional(v.pipe(v.string(), v.uuid())),
    greater_than: v.optional(v.pipe(v.string(), v.uuid())),
    greater_than_or_equal: v.optional(v.pipe(v.string(), v.uuid())),
    in: v.optional(v.array(v.pipe(v.string(), v.uuid()))),
    is_nil: v.optional(v.boolean()),
    less_than: v.optional(v.pipe(v.string(), v.uuid())),
    less_than_or_equal: v.optional(v.pipe(v.string(), v.uuid())),
    not_eq: v.optional(v.pipe(v.string(), v.uuid()))
});

/**
 * A "Resource object" representing a pay_item_excluded_payer
 */
export const vPayItemExcludedPayer = v.object({
    attributes: v.optional(v.object({
        pay_item_id: v.pipe(v.string(), v.uuid()),
        payer_id: v.pipe(v.string(), v.uuid())
    })),
    id: v.string(),
    relationships: v.optional(v.object({
        pay_item: v.optional(v.object({
            data: v.optional(v.union([
                v.object({
                    id: v.string(),
                    meta: v.optional(v.object({})),
                    type: v.string()
                }),
                v.null()
            ]))
        })),
        payer: v.optional(v.object({
            data: v.optional(v.union([
                v.object({
                    id: v.string(),
                    meta: v.optional(v.object({})),
                    type: v.string()
                }),
                v.null()
            ]))
        }))
    })),
    type: v.string()
});

/**
 * A "Resource object" representing a payer
 */
export const vPayer = v.object({
    attributes: v.optional(v.object({
        banc_account: v.optional(v.union([
            v.union([
                v.string(),
                v.null()
            ]),
            v.unknown()
        ])),
        name: v.string(),
        room_id: v.optional(v.union([
            v.union([
                v.pipe(v.string(), v.uuid()),
                v.null()
            ]),
            v.unknown()
        ]))
    })),
    id: v.string(),
    relationships: v.optional(v.object({
        room: v.optional(v.object({
            data: v.optional(v.union([
                v.object({
                    id: v.string(),
                    meta: v.optional(v.object({})),
                    type: v.string()
                }),
                v.null()
            ]))
        })),
        settled_items: v.optional(v.object({
            data: v.optional(v.array(v.object({
                id: v.string(),
                meta: v.optional(v.object({})),
                type: v.string()
            })))
        }))
    })),
    type: v.string()
});

/**
 * Filters the query to results matching the given filter object
 */
export const vPayerFilter = v.unknown();

export const vPayerFilterBancAccount = v.object({
    contains: v.optional(v.string()),
    eq: v.optional(v.string()),
    greater_than: v.optional(v.string()),
    greater_than_or_equal: v.optional(v.string()),
    ilike: v.optional(v.string()),
    in: v.optional(v.array(v.string())),
    is_nil: v.optional(v.boolean()),
    less_than: v.optional(v.string()),
    less_than_or_equal: v.optional(v.string()),
    like: v.optional(v.string()),
    not_eq: v.optional(v.string())
});

export const vPayerFilterId = v.object({
    eq: v.optional(v.pipe(v.string(), v.uuid())),
    greater_than: v.optional(v.pipe(v.string(), v.uuid())),
    greater_than_or_equal: v.optional(v.pipe(v.string(), v.uuid())),
    in: v.optional(v.array(v.pipe(v.string(), v.uuid()))),
    is_nil: v.optional(v.boolean()),
    less_than: v.optional(v.pipe(v.string(), v.uuid())),
    less_than_or_equal: v.optional(v.pipe(v.string(), v.uuid())),
    not_eq: v.optional(v.pipe(v.string(), v.uuid()))
});

export const vPayerFilterName = v.object({
    contains: v.optional(v.string()),
    eq: v.optional(v.string()),
    greater_than: v.optional(v.string()),
    greater_than_or_equal: v.optional(v.string()),
    ilike: v.optional(v.string()),
    in: v.optional(v.array(v.string())),
    is_nil: v.optional(v.boolean()),
    less_than: v.optional(v.string()),
    less_than_or_equal: v.optional(v.string()),
    like: v.optional(v.string()),
    not_eq: v.optional(v.string())
});

export const vPayerFilterRoomId = v.object({
    eq: v.optional(v.pipe(v.string(), v.uuid())),
    greater_than: v.optional(v.pipe(v.string(), v.uuid())),
    greater_than_or_equal: v.optional(v.pipe(v.string(), v.uuid())),
    in: v.optional(v.array(v.pipe(v.string(), v.uuid()))),
    is_nil: v.optional(v.boolean()),
    less_than: v.optional(v.pipe(v.string(), v.uuid())),
    less_than_or_equal: v.optional(v.pipe(v.string(), v.uuid())),
    not_eq: v.optional(v.pipe(v.string(), v.uuid()))
});

/**
 * A "Resource object" representing a room
 */
export const vRoom = v.object({
    attributes: v.optional(v.object({
        counts_of_payers: v.optional(v.union([
            v.pipe(v.number(), v.integer()),
            v.unknown()
        ])),
        expiration_at: v.optional(v.union([
            v.union([
                v.pipe(v.string(), v.isoTimestamp()),
                v.null()
            ]),
            v.unknown()
        ])),
        name: v.pipe(v.string(), v.minLength(1), v.maxLength(8)),
        short_id: v.optional(v.union([
            v.union([
                v.string(),
                v.null()
            ]),
            v.unknown()
        ]))
    })),
    id: v.string(),
    relationships: v.optional(v.object({
        payers: v.optional(v.object({
            data: v.optional(v.array(v.object({
                id: v.string(),
                meta: v.optional(v.object({})),
                type: v.string()
            })))
        }))
    })),
    type: v.string()
});

/**
 * Filters the query to results matching the given filter object
 */
export const vRoomFilter = v.unknown();

export const vRoomFilterCountsOfPayers = v.object({
    eq: v.optional(v.pipe(v.number(), v.integer())),
    greater_than: v.optional(v.pipe(v.number(), v.integer())),
    greater_than_or_equal: v.optional(v.pipe(v.number(), v.integer())),
    in: v.optional(v.array(v.pipe(v.number(), v.integer()))),
    is_nil: v.optional(v.boolean()),
    less_than: v.optional(v.pipe(v.number(), v.integer())),
    less_than_or_equal: v.optional(v.pipe(v.number(), v.integer())),
    not_eq: v.optional(v.pipe(v.number(), v.integer()))
});

export const vRoomFilterExpirationAt = v.object({
    eq: v.optional(v.pipe(v.string(), v.isoTimestamp())),
    greater_than: v.optional(v.pipe(v.string(), v.isoTimestamp())),
    greater_than_or_equal: v.optional(v.pipe(v.string(), v.isoTimestamp())),
    in: v.optional(v.array(v.pipe(v.string(), v.isoTimestamp()))),
    is_nil: v.optional(v.boolean()),
    less_than: v.optional(v.pipe(v.string(), v.isoTimestamp())),
    less_than_or_equal: v.optional(v.pipe(v.string(), v.isoTimestamp())),
    not_eq: v.optional(v.pipe(v.string(), v.isoTimestamp()))
});

export const vRoomFilterId = v.object({
    eq: v.optional(v.pipe(v.string(), v.uuid())),
    greater_than: v.optional(v.pipe(v.string(), v.uuid())),
    greater_than_or_equal: v.optional(v.pipe(v.string(), v.uuid())),
    in: v.optional(v.array(v.pipe(v.string(), v.uuid()))),
    is_nil: v.optional(v.boolean()),
    less_than: v.optional(v.pipe(v.string(), v.uuid())),
    less_than_or_equal: v.optional(v.pipe(v.string(), v.uuid())),
    not_eq: v.optional(v.pipe(v.string(), v.uuid()))
});

export const vRoomFilterName = v.object({
    eq: v.optional(v.pipe(v.string(), v.minLength(1), v.maxLength(8))),
    greater_than: v.optional(v.pipe(v.string(), v.minLength(1), v.maxLength(8))),
    greater_than_or_equal: v.optional(v.pipe(v.string(), v.minLength(1), v.maxLength(8))),
    in: v.optional(v.array(v.string())),
    is_nil: v.optional(v.boolean()),
    less_than: v.optional(v.pipe(v.string(), v.minLength(1), v.maxLength(8))),
    less_than_or_equal: v.optional(v.pipe(v.string(), v.minLength(1), v.maxLength(8))),
    not_eq: v.optional(v.pipe(v.string(), v.minLength(1), v.maxLength(8)))
});

export const vRoomFilterShortId = v.object({
    contains: v.optional(v.string()),
    eq: v.optional(v.string()),
    greater_than: v.optional(v.string()),
    greater_than_or_equal: v.optional(v.string()),
    ilike: v.optional(v.string()),
    in: v.optional(v.array(v.string())),
    is_nil: v.optional(v.boolean()),
    less_than: v.optional(v.string()),
    less_than_or_equal: v.optional(v.string()),
    like: v.optional(v.string()),
    not_eq: v.optional(v.string())
});

/**
 * Filters the query to results with attributes matching the given filter object
 */
export const vGetApiJsonPayItemParameterFilter = vPayItemFilter;

/**
 * Sort order to apply to the results
 */
export const vGetApiJsonPayItemParameterSort = v.pipe(v.string(), v.regex(/^(id|-id|\+\+id|--id|name|-name|\+\+name|--name|amount|-amount|\+\+amount|--amount|room_id|-room_id|\+\+room_id|--room_id|settled_id|-settled_id|\+\+settled_id|--settled_id)(,(id|-id|\+\+id|--id|name|-name|\+\+name|--name|amount|-amount|\+\+amount|--amount|room_id|-room_id|\+\+room_id|--room_id|settled_id|-settled_id|\+\+settled_id|--settled_id))*$/));

/**
 * Paginates the response with the limit and offset or keyset pagination.
 */
export const vGetApiJsonPayItemParameterPage = v.object({
    after: v.optional(v.string()),
    before: v.optional(v.string()),
    count: v.optional(v.boolean(), false),
    limit: v.optional(v.pipe(v.number(), v.integer(), v.minValue(1))),
    offset: v.optional(v.pipe(v.number(), v.integer(), v.minValue(0)))
});

/**
 * Relationship paths to include in the response
 */
export const vGetApiJsonPayItemParameterInclude = v.pipe(v.string(), v.regex(/^(settler|excluded_payers)(,(settler|excluded_payers))*$/));

/**
 * Limits the response fields to only those listed for each type
 */
export const vGetApiJsonPayItemParameterFields = v.object({
    pay_item: v.optional(v.string())
});

/**
 * Success
 */
export const vGetApiJsonPayItemResponse = v.object({
    data: v.optional(v.array(vPayItem)),
    included: v.optional(v.array(vPayer)),
    meta: v.optional(v.object({}))
});

/**
 * Request body for the /pay_item operation on pay_item resource
 */
export const vPostApiJsonPayItemData = v.object({
    data: v.object({
        attributes: v.optional(v.object({})),
        relationships: v.optional(v.object({})),
        type: v.optional(v.picklist([
            'pay_item'
        ]))
    })
});

/**
 * Relationship paths to include in the response
 */
export const vPostApiJsonPayItemParameterInclude = v.pipe(v.string(), v.regex(/^(settler|excluded_payers)(,(settler|excluded_payers))*$/));

/**
 * Limits the response fields to only those listed for each type
 */
export const vPostApiJsonPayItemParameterFields = v.object({
    pay_item: v.optional(v.string())
});

/**
 * Success
 */
export const vPostApiJsonPayItemResponse = v.object({
    data: v.optional(vPayItem),
    included: v.optional(v.array(vPayer)),
    meta: v.optional(v.object({}))
});

/**
 * Request body for the /pay_item/upsert_from_words operation on pay_item resource
 */
export const vPostApiJsonPayItemUpsertFromWordsData = v.object({
    data: v.object({
        attributes: v.optional(v.object({
            words: v.optional(v.union([
                v.string(),
                v.unknown()
            ]))
        })),
        relationships: v.optional(v.object({})),
        type: v.optional(v.picklist([
            'pay_item'
        ]))
    })
});

/**
 * Relationship paths to include in the response
 */
export const vPostApiJsonPayItemUpsertFromWordsParameterInclude = v.pipe(v.string(), v.regex(/^(settler|excluded_payers)(,(settler|excluded_payers))*$/));

/**
 * Limits the response fields to only those listed for each type
 */
export const vPostApiJsonPayItemUpsertFromWordsParameterFields = v.object({
    pay_item: v.optional(v.string())
});

/**
 * Success
 */
export const vPostApiJsonPayItemUpsertFromWordsResponse = v.object({
    data: v.optional(vPayItem),
    included: v.optional(v.array(vPayer)),
    meta: v.optional(v.object({}))
});

/**
 * Filters the query to results with attributes matching the given filter object
 */
export const vGetApiJsonPayersParameterFilter = vPayerFilter;

/**
 * Sort order to apply to the results
 */
export const vGetApiJsonPayersParameterSort = v.pipe(v.string(), v.regex(/^(id|-id|\+\+id|--id|name|-name|\+\+name|--name|banc_account|-banc_account|\+\+banc_account|--banc_account|room_id|-room_id|\+\+room_id|--room_id)(,(id|-id|\+\+id|--id|name|-name|\+\+name|--name|banc_account|-banc_account|\+\+banc_account|--banc_account|room_id|-room_id|\+\+room_id|--room_id))*$/));

/**
 * Paginates the response with the limit and offset or keyset pagination.
 */
export const vGetApiJsonPayersParameterPage = v.object({
    after: v.optional(v.string()),
    before: v.optional(v.string()),
    count: v.optional(v.boolean(), false),
    limit: v.optional(v.pipe(v.number(), v.integer(), v.minValue(1))),
    offset: v.optional(v.pipe(v.number(), v.integer(), v.minValue(0)))
});

/**
 * Relationship paths to include in the response
 */
export const vGetApiJsonPayersParameterInclude = v.pipe(v.string(), v.regex(/^(room|settled_items)(,(room|settled_items))*$/));

/**
 * Limits the response fields to only those listed for each type
 */
export const vGetApiJsonPayersParameterFields = v.object({
    payer: v.optional(v.string())
});

/**
 * Success
 */
export const vGetApiJsonPayersResponse = v.object({
    data: v.optional(v.array(vPayer)),
    included: v.optional(v.array(v.unknown())),
    meta: v.optional(v.object({}))
});

/**
 * Filters the query to results with attributes matching the given filter object
 */
export const vGetApiJsonRoomsParameterFilter = vRoomFilter;

/**
 * Sort order to apply to the results
 */
export const vGetApiJsonRoomsParameterSort = v.pipe(v.string(), v.regex(/^(id|-id|\+\+id|--id|short_id|-short_id|\+\+short_id|--short_id|name|-name|\+\+name|--name|expiration_at|-expiration_at|\+\+expiration_at|--expiration_at|counts_of_payers|-counts_of_payers|\+\+counts_of_payers|--counts_of_payers)(,(id|-id|\+\+id|--id|short_id|-short_id|\+\+short_id|--short_id|name|-name|\+\+name|--name|expiration_at|-expiration_at|\+\+expiration_at|--expiration_at|counts_of_payers|-counts_of_payers|\+\+counts_of_payers|--counts_of_payers))*$/));

/**
 * Relationship paths to include in the response
 */
export const vGetApiJsonRoomsParameterInclude = v.pipe(v.string(), v.regex(/^(payers)(,(payers))*$/));

/**
 * Limits the response fields to only those listed for each type
 */
export const vGetApiJsonRoomsParameterFields = v.object({
    room: v.optional(v.string())
});

/**
 * Success
 */
export const vGetApiJsonRoomsResponse = v.object({
    data: v.optional(v.array(vRoom)),
    included: v.optional(v.array(vPayer)),
    meta: v.optional(v.object({}))
});

export const vGetApiJsonRoomsByIdByIdParameterId = v.pipe(v.string(), v.uuid());

/**
 * Relationship paths to include in the response
 */
export const vGetApiJsonRoomsByIdByIdParameterInclude = v.pipe(v.string(), v.regex(/^(payers)(,(payers))*$/));

/**
 * Limits the response fields to only those listed for each type
 */
export const vGetApiJsonRoomsByIdByIdParameterFields = v.object({
    room: v.optional(v.string())
});

/**
 * Success
 */
export const vGetApiJsonRoomsByIdByIdResponse = v.object({
    data: v.optional(vRoom),
    included: v.optional(v.array(vPayer)),
    meta: v.optional(v.object({}))
});

export const vGetApiJsonRoomsByShortIdByShortIdParameterShortId = v.string();

/**
 * Relationship paths to include in the response
 */
export const vGetApiJsonRoomsByShortIdByShortIdParameterInclude = v.pipe(v.string(), v.regex(/^(payers)(,(payers))*$/));

/**
 * Limits the response fields to only those listed for each type
 */
export const vGetApiJsonRoomsByShortIdByShortIdParameterFields = v.object({
    room: v.optional(v.string())
});

/**
 * Success
 */
export const vGetApiJsonRoomsByShortIdByShortIdResponse = v.object({
    data: v.optional(vRoom),
    included: v.optional(v.array(vPayer)),
    meta: v.optional(v.object({}))
});

/**
 * Request body for the /rooms/name operation on room resource
 */
export const vPatchApiJsonRoomsNameData = v.object({
    data: v.object({
        attributes: v.optional(v.object({
            name: v.optional(v.union([
                v.string(),
                v.unknown()
            ]))
        })),
        id: v.string(),
        relationships: v.optional(v.object({})),
        type: v.optional(v.picklist([
            'room'
        ]))
    })
});

/**
 * Relationship paths to include in the response
 */
export const vPatchApiJsonRoomsNameParameterInclude = v.pipe(v.string(), v.regex(/^(payers)(,(payers))*$/));

/**
 * Limits the response fields to only those listed for each type
 */
export const vPatchApiJsonRoomsNameParameterFields = v.object({
    room: v.optional(v.string())
});

/**
 * Success
 */
export const vPatchApiJsonRoomsNameResponse = v.object({
    data: v.optional(vRoom),
    included: v.optional(v.array(vPayer)),
    meta: v.optional(v.object({}))
});

/**
 * Request body for the /rooms/upsert_with_payers operation on room resource
 */
export const vPostApiJsonRoomsUpsertWithPayersData = v.object({
    data: v.object({
        attributes: v.optional(v.object({
            id: v.optional(v.union([
                v.pipe(v.string(), v.uuid()),
                v.unknown()
            ]))
        })),
        relationships: v.optional(v.object({
            payers: v.optional(v.object({
                data: v.optional(v.array(v.object({
                    id: v.string(),
                    meta: v.optional(v.object({})),
                    type: v.string()
                }))),
                links: v.optional(v.object({}))
            }))
        })),
        type: v.optional(v.picklist([
            'room'
        ]))
    })
});

/**
 * Relationship paths to include in the response
 */
export const vPostApiJsonRoomsUpsertWithPayersParameterInclude = v.pipe(v.string(), v.regex(/^(payers)(,(payers))*$/));

/**
 * Limits the response fields to only those listed for each type
 */
export const vPostApiJsonRoomsUpsertWithPayersParameterFields = v.object({
    room: v.optional(v.string())
});

/**
 * Success
 */
export const vPostApiJsonRoomsUpsertWithPayersResponse = v.object({
    data: v.optional(vRoom),
    included: v.optional(v.array(vPayer)),
    meta: v.optional(v.object({}))
});

export const vGetApiJsonRoomsByIdPayersParameterId = v.string();

/**
 * Relationship paths to include in the response
 */
export const vGetApiJsonRoomsByIdPayersParameterInclude = v.pipe(v.string(), v.regex(/^(room|settled_items)(,(room|settled_items))*$/));

/**
 * Limits the response fields to only those listed for each type
 */
export const vGetApiJsonRoomsByIdPayersParameterFields = v.object({
    payer: v.optional(v.string())
});

/**
 * Success
 */
export const vGetApiJsonRoomsByIdPayersResponse = v.object({
    data: v.optional(vPayer),
    included: v.optional(v.array(v.unknown())),
    meta: v.optional(v.object({}))
});