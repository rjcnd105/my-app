// This file is auto-generated by @hey-api/openapi-ts

export type _Error = {
    /**
     * An application-specific error code, expressed as a string value.
     */
    code?: string;
    /**
     * A human-readable explanation specific to this occurrence of the problem.
     */
    detail?: string;
    /**
     * A unique identifier for this particular occurrence of the problem.
     */
    id?: string;
    links?: Links;
    source?: {
        /**
         * A string indicating which query parameter caused the error.
         */
        parameter?: string;
        /**
         * A JSON Pointer [RFC6901] to the associated entity in the request document [e.g. "/data" for a primary data object, or "/data/attributes/title" for a specific attribute].
         */
        pointer?: string;
    };
    /**
     * The HTTP status code applicable to this problem, expressed as a string value.
     */
    status?: string;
    /**
     * A short, human-readable summary of the problem. It SHOULD NOT change from occurrence to occurrence of the problem, except for purposes of localization.
     */
    title?: string;
};

export type Errors = Array<_Error>;

/**
 * A link MUST be represented as either: a string containing the link's URL or a link object.
 */
export type Link = string;

export type Links = {
    [key: string]: Link;
};

/**
 * A "Resource object" representing a pay_item
 */
export type PayItem = {
    /**
     * An attributes object for a pay_item
     */
    attributes?: {
        /**
         * Field included by default.
         */
        amount?: (number | null) | unknown;
        /**
         * Field included by default.
         */
        name?: (string | null) | unknown;
        /**
         * Field included by default.
         */
        room_id?: (string | null) | unknown;
        /**
         * Field included by default.
         */
        settled_id: string;
    };
    id: string;
    /**
     * A relationships object for a pay_item
     */
    relationships?: {
        excluded_payers?: {
            /**
             * Relationship data for excluded_payers
             */
            data?: Array<{
                id: string;
                meta?: {
                    [key: string]: unknown;
                };
                type: string;
            }>;
        };
        room?: {
            /**
             * An identifier for room
             */
            data?: {
                id: string;
                meta?: {
                    [key: string]: unknown;
                };
                type: string;
            } | null;
        };
        settler?: {
            /**
             * An identifier for settler
             */
            data?: {
                id: string;
                meta?: {
                    [key: string]: unknown;
                };
                type: string;
            } | null;
        };
    };
    type: string;
};

/**
 * Filters the query to results matching the given filter object
 */
export type PayItemFilter = unknown;

export type PayItemFilterAmount = {
    eq?: number;
    greater_than?: number;
    greater_than_or_equal?: number;
    in?: Array<number>;
    is_nil?: boolean;
    less_than?: number;
    less_than_or_equal?: number;
    not_eq?: number;
};

export type PayItemFilterId = {
    eq?: string;
    greater_than?: string;
    greater_than_or_equal?: string;
    in?: Array<string>;
    is_nil?: boolean;
    less_than?: string;
    less_than_or_equal?: string;
    not_eq?: string;
};

export type PayItemFilterName = {
    contains?: string;
    eq?: string;
    greater_than?: string;
    greater_than_or_equal?: string;
    ilike?: string;
    in?: Array<string>;
    is_nil?: boolean;
    less_than?: string;
    less_than_or_equal?: string;
    like?: string;
    not_eq?: string;
};

export type PayItemFilterRoomId = {
    eq?: string;
    greater_than?: string;
    greater_than_or_equal?: string;
    in?: Array<string>;
    is_nil?: boolean;
    less_than?: string;
    less_than_or_equal?: string;
    not_eq?: string;
};

export type PayItemFilterSettledId = {
    eq?: string;
    greater_than?: string;
    greater_than_or_equal?: string;
    in?: Array<string>;
    is_nil?: boolean;
    less_than?: string;
    less_than_or_equal?: string;
    not_eq?: string;
};

/**
 * A "Resource object" representing a pay_item_excluded_payer
 */
export type PayItemExcludedPayer = {
    /**
     * An attributes object for a pay_item_excluded_payer
     */
    attributes?: {
        /**
         * Field included by default.
         */
        pay_item_id: string;
        /**
         * Field included by default.
         */
        payer_id: string;
    };
    id: string;
    /**
     * A relationships object for a pay_item_excluded_payer
     */
    relationships?: {
        pay_item?: {
            /**
             * An identifier for pay_item
             */
            data?: {
                id: string;
                meta?: {
                    [key: string]: unknown;
                };
                type: string;
            } | null;
        };
        payer?: {
            /**
             * An identifier for payer
             */
            data?: {
                id: string;
                meta?: {
                    [key: string]: unknown;
                };
                type: string;
            } | null;
        };
    };
    type: string;
};

/**
 * A "Resource object" representing a payer
 */
export type Payer = {
    /**
     * An attributes object for a payer
     */
    attributes?: {
        /**
         * Field included by default.
         */
        banc_account?: (string | null) | unknown;
        /**
         * Field included by default.
         */
        name: string;
        /**
         * Field included by default.
         */
        room_id?: (string | null) | unknown;
    };
    id: string;
    /**
     * A relationships object for a payer
     */
    relationships?: {
        room?: {
            /**
             * An identifier for room
             */
            data?: {
                id: string;
                meta?: {
                    [key: string]: unknown;
                };
                type: string;
            } | null;
        };
        settled_items?: {
            /**
             * Relationship data for settled_items
             */
            data?: Array<{
                id: string;
                meta?: {
                    [key: string]: unknown;
                };
                type: string;
            }>;
        };
    };
    type: string;
};

/**
 * Filters the query to results matching the given filter object
 */
export type PayerFilter = unknown;

export type PayerFilterBancAccount = {
    contains?: string;
    eq?: string;
    greater_than?: string;
    greater_than_or_equal?: string;
    ilike?: string;
    in?: Array<string>;
    is_nil?: boolean;
    less_than?: string;
    less_than_or_equal?: string;
    like?: string;
    not_eq?: string;
};

export type PayerFilterId = {
    eq?: string;
    greater_than?: string;
    greater_than_or_equal?: string;
    in?: Array<string>;
    is_nil?: boolean;
    less_than?: string;
    less_than_or_equal?: string;
    not_eq?: string;
};

export type PayerFilterName = {
    contains?: string;
    eq?: string;
    greater_than?: string;
    greater_than_or_equal?: string;
    ilike?: string;
    in?: Array<string>;
    is_nil?: boolean;
    less_than?: string;
    less_than_or_equal?: string;
    like?: string;
    not_eq?: string;
};

export type PayerFilterRoomId = {
    eq?: string;
    greater_than?: string;
    greater_than_or_equal?: string;
    in?: Array<string>;
    is_nil?: boolean;
    less_than?: string;
    less_than_or_equal?: string;
    not_eq?: string;
};

/**
 * A "Resource object" representing a room
 */
export type Room = {
    /**
     * An attributes object for a room
     */
    attributes?: {
        counts_of_payers?: number | unknown;
        /**
         * Field included by default.
         */
        expiration_at?: (string | null) | unknown;
        /**
         * Field included by default.
         */
        name: string;
        /**
         * Field included by default.
         */
        short_id?: (string | null) | unknown;
        /**
         * Field included by default.
         */
        updated_at: unknown;
    };
    id: string;
    /**
     * A relationships object for a room
     */
    relationships?: {
        payers?: {
            /**
             * Relationship data for payers
             */
            data?: Array<{
                id: string;
                meta?: {
                    [key: string]: unknown;
                };
                type: string;
            }>;
        };
    };
    type: string;
};

/**
 * Filters the query to results matching the given filter object
 */
export type RoomFilter = unknown;

export type RoomFilterCountsOfPayers = {
    eq?: number;
    greater_than?: number;
    greater_than_or_equal?: number;
    in?: Array<number>;
    is_nil?: boolean;
    less_than?: number;
    less_than_or_equal?: number;
    not_eq?: number;
};

export type RoomFilterExpirationAt = {
    eq?: string;
    greater_than?: string;
    greater_than_or_equal?: string;
    in?: Array<string>;
    is_nil?: boolean;
    less_than?: string;
    less_than_or_equal?: string;
    not_eq?: string;
};

export type RoomFilterId = {
    eq?: string;
    greater_than?: string;
    greater_than_or_equal?: string;
    in?: Array<string>;
    is_nil?: boolean;
    less_than?: string;
    less_than_or_equal?: string;
    not_eq?: string;
};

export type RoomFilterName = {
    contains?: string;
    eq?: string;
    greater_than?: string;
    greater_than_or_equal?: string;
    ilike?: string;
    in?: Array<string>;
    is_nil?: boolean;
    less_than?: string;
    less_than_or_equal?: string;
    like?: string;
    not_eq?: string;
};

export type RoomFilterShortId = {
    contains?: string;
    eq?: string;
    greater_than?: string;
    greater_than_or_equal?: string;
    ilike?: string;
    in?: Array<string>;
    is_nil?: boolean;
    less_than?: string;
    less_than_or_equal?: string;
    like?: string;
    not_eq?: string;
};

export type RoomFilterUpdatedAt = {
    eq?: unknown;
    greater_than?: unknown;
    greater_than_or_equal?: unknown;
    in?: Array<unknown>;
    is_nil?: boolean;
    less_than?: unknown;
    less_than_or_equal?: unknown;
    not_eq?: unknown;
};

export type GetApiJsonPayItemData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Filters the query to results with attributes matching the given filter object
         */
        filter?: PayItemFilter;
        /**
         * Sort order to apply to the results
         */
        sort?: string;
        /**
         * Paginates the response with the limit and offset or keyset pagination.
         */
        page?: {
            after?: string;
            before?: string;
            count?: boolean;
            limit?: number;
            offset?: number;
        };
        /**
         * Relationship paths to include in the response
         */
        include?: string;
        /**
         * Limits the response fields to only those listed for each type
         */
        fields?: {
            /**
             * Comma separated field names for pay_item
             */
            pay_item?: string;
            [key: string]: unknown | string | undefined;
        };
    };
    url: '/api/json/pay_item';
};

export type GetApiJsonPayItemErrors = {
    /**
     * General Error
     */
    default: Errors;
};

export type GetApiJsonPayItemError = GetApiJsonPayItemErrors[keyof GetApiJsonPayItemErrors];

export type GetApiJsonPayItemResponses = {
    /**
     * Success
     */
    200: {
        /**
         * An array of resource objects representing a pay_item
         */
        data?: Array<PayItem>;
        included?: Array<Payer>;
        meta?: {
            [key: string]: unknown;
        };
    };
};

export type GetApiJsonPayItemResponse = GetApiJsonPayItemResponses[keyof GetApiJsonPayItemResponses];

export type PostApiJsonPayItemData = {
    /**
     * Request body for the /pay_item operation on pay_item resource
     */
    body?: {
        data: {
            attributes?: {
                [key: string]: never;
            };
            relationships?: {
                [key: string]: never;
            };
            type?: 'pay_item';
        };
    };
    path?: never;
    query?: {
        /**
         * Relationship paths to include in the response
         */
        include?: string;
        /**
         * Limits the response fields to only those listed for each type
         */
        fields?: {
            /**
             * Comma separated field names for pay_item
             */
            pay_item?: string;
            [key: string]: unknown | string | undefined;
        };
    };
    url: '/api/json/pay_item';
};

export type PostApiJsonPayItemErrors = {
    /**
     * General Error
     */
    default: Errors;
};

export type PostApiJsonPayItemError = PostApiJsonPayItemErrors[keyof PostApiJsonPayItemErrors];

export type PostApiJsonPayItemResponses = {
    /**
     * Success
     */
    201: {
        data?: PayItem;
        included?: Array<Payer>;
        meta?: {
            [key: string]: unknown;
        };
    };
};

export type PostApiJsonPayItemResponse = PostApiJsonPayItemResponses[keyof PostApiJsonPayItemResponses];

export type PostApiJsonPayItemUpsertFromWordsData = {
    /**
     * Request body for the /pay_item/upsert_from_words operation on pay_item resource
     */
    body?: {
        data: {
            attributes?: {
                words?: string | unknown;
            };
            relationships?: {
                [key: string]: never;
            };
            type?: 'pay_item';
        };
    };
    path?: never;
    query?: {
        /**
         * Relationship paths to include in the response
         */
        include?: string;
        /**
         * Limits the response fields to only those listed for each type
         */
        fields?: {
            /**
             * Comma separated field names for pay_item
             */
            pay_item?: string;
            [key: string]: unknown | string | undefined;
        };
    };
    url: '/api/json/pay_item/upsert_from_words';
};

export type PostApiJsonPayItemUpsertFromWordsErrors = {
    /**
     * General Error
     */
    default: Errors;
};

export type PostApiJsonPayItemUpsertFromWordsError = PostApiJsonPayItemUpsertFromWordsErrors[keyof PostApiJsonPayItemUpsertFromWordsErrors];

export type PostApiJsonPayItemUpsertFromWordsResponses = {
    /**
     * Success
     */
    201: {
        data?: PayItem;
        included?: Array<Payer>;
        meta?: {
            [key: string]: unknown;
        };
    };
};

export type PostApiJsonPayItemUpsertFromWordsResponse = PostApiJsonPayItemUpsertFromWordsResponses[keyof PostApiJsonPayItemUpsertFromWordsResponses];

export type GetApiJsonPayersData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Filters the query to results with attributes matching the given filter object
         */
        filter?: PayerFilter;
        /**
         * Sort order to apply to the results
         */
        sort?: string;
        /**
         * Paginates the response with the limit and offset or keyset pagination.
         */
        page?: {
            after?: string;
            before?: string;
            count?: boolean;
            limit?: number;
            offset?: number;
        };
        /**
         * Relationship paths to include in the response
         */
        include?: string;
        /**
         * Limits the response fields to only those listed for each type
         */
        fields?: {
            /**
             * Comma separated field names for payer
             */
            payer?: string;
            [key: string]: unknown | string | undefined;
        };
    };
    url: '/api/json/payers';
};

export type GetApiJsonPayersErrors = {
    /**
     * General Error
     */
    default: Errors;
};

export type GetApiJsonPayersError = GetApiJsonPayersErrors[keyof GetApiJsonPayersErrors];

export type GetApiJsonPayersResponses = {
    /**
     * Success
     */
    200: {
        /**
         * An array of resource objects representing a payer
         */
        data?: Array<Payer>;
        included?: Array<Room | PayItem>;
        meta?: {
            [key: string]: unknown;
        };
    };
};

export type GetApiJsonPayersResponse = GetApiJsonPayersResponses[keyof GetApiJsonPayersResponses];

export type GetApiJsonRoomsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Filters the query to results with attributes matching the given filter object
         */
        filter?: RoomFilter;
        /**
         * Sort order to apply to the results
         */
        sort?: string;
        /**
         * Relationship paths to include in the response
         */
        include?: string;
        /**
         * Limits the response fields to only those listed for each type
         */
        fields?: {
            /**
             * Comma separated field names for room
             */
            room?: string;
            [key: string]: unknown | string | undefined;
        };
    };
    url: '/api/json/rooms';
};

export type GetApiJsonRoomsErrors = {
    /**
     * General Error
     */
    default: Errors;
};

export type GetApiJsonRoomsError = GetApiJsonRoomsErrors[keyof GetApiJsonRoomsErrors];

export type GetApiJsonRoomsResponses = {
    /**
     * Success
     */
    200: {
        /**
         * An array of resource objects representing a room
         */
        data?: Array<Room>;
        included?: Array<Payer>;
        meta?: {
            [key: string]: unknown;
        };
    };
};

export type GetApiJsonRoomsResponse = GetApiJsonRoomsResponses[keyof GetApiJsonRoomsResponses];

export type GetApiJsonRoomsByIdByIdData = {
    body?: never;
    path: {
        id: string;
    };
    query?: {
        /**
         * Relationship paths to include in the response
         */
        include?: string;
        /**
         * Limits the response fields to only those listed for each type
         */
        fields?: {
            /**
             * Comma separated field names for room
             */
            room?: string;
            [key: string]: unknown | string | undefined;
        };
    };
    url: '/api/json/rooms/by_id/{id}';
};

export type GetApiJsonRoomsByIdByIdErrors = {
    /**
     * General Error
     */
    default: Errors;
};

export type GetApiJsonRoomsByIdByIdError = GetApiJsonRoomsByIdByIdErrors[keyof GetApiJsonRoomsByIdByIdErrors];

export type GetApiJsonRoomsByIdByIdResponses = {
    /**
     * Success
     */
    200: {
        data?: Room;
        included?: Array<Payer>;
        meta?: {
            [key: string]: unknown;
        };
    };
};

export type GetApiJsonRoomsByIdByIdResponse = GetApiJsonRoomsByIdByIdResponses[keyof GetApiJsonRoomsByIdByIdResponses];

export type GetApiJsonRoomsByShortIdByShortIdData = {
    body?: never;
    path: {
        short_id: string;
    };
    query?: {
        /**
         * Relationship paths to include in the response
         */
        include?: string;
        /**
         * Limits the response fields to only those listed for each type
         */
        fields?: {
            /**
             * Comma separated field names for room
             */
            room?: string;
            [key: string]: unknown | string | undefined;
        };
    };
    url: '/api/json/rooms/by_short_id/{short_id}';
};

export type GetApiJsonRoomsByShortIdByShortIdErrors = {
    /**
     * General Error
     */
    default: Errors;
};

export type GetApiJsonRoomsByShortIdByShortIdError = GetApiJsonRoomsByShortIdByShortIdErrors[keyof GetApiJsonRoomsByShortIdByShortIdErrors];

export type GetApiJsonRoomsByShortIdByShortIdResponses = {
    /**
     * Success
     */
    200: {
        data?: Room;
        included?: Array<Payer>;
        meta?: {
            [key: string]: unknown;
        };
    };
};

export type GetApiJsonRoomsByShortIdByShortIdResponse = GetApiJsonRoomsByShortIdByShortIdResponses[keyof GetApiJsonRoomsByShortIdByShortIdResponses];

export type PatchApiJsonRoomsNameData = {
    /**
     * Request body for the /rooms/name operation on room resource
     */
    body?: {
        data: {
            attributes?: {
                name?: string | unknown;
            };
            id: string;
            relationships?: {
                [key: string]: never;
            };
            type?: 'room';
        };
    };
    path?: never;
    query?: {
        /**
         * Relationship paths to include in the response
         */
        include?: string;
        /**
         * Limits the response fields to only those listed for each type
         */
        fields?: {
            /**
             * Comma separated field names for room
             */
            room?: string;
            [key: string]: unknown | string | undefined;
        };
    };
    url: '/api/json/rooms/name';
};

export type PatchApiJsonRoomsNameErrors = {
    /**
     * General Error
     */
    default: Errors;
};

export type PatchApiJsonRoomsNameError = PatchApiJsonRoomsNameErrors[keyof PatchApiJsonRoomsNameErrors];

export type PatchApiJsonRoomsNameResponses = {
    /**
     * Success
     */
    200: {
        data?: Room;
        included?: Array<Payer>;
        meta?: {
            [key: string]: unknown;
        };
    };
};

export type PatchApiJsonRoomsNameResponse = PatchApiJsonRoomsNameResponses[keyof PatchApiJsonRoomsNameResponses];

export type PostApiJsonRoomsUpsertWithPayersData = {
    /**
     * Request body for the /rooms/upsert_with_payers operation on room resource
     */
    body?: {
        data: {
            attributes?: {
                id?: string | unknown;
            };
            relationships?: {
                payers?: {
                    /**
                     * An array of inputs for payers
                     */
                    data?: Array<{
                        id: string;
                        meta?: {
                            [key: string]: unknown;
                        };
                        type: string;
                    }>;
                    links?: {
                        [key: string]: unknown;
                    };
                };
            };
            type?: 'room';
        };
    };
    path?: never;
    query?: {
        /**
         * Relationship paths to include in the response
         */
        include?: string;
        /**
         * Limits the response fields to only those listed for each type
         */
        fields?: {
            /**
             * Comma separated field names for room
             */
            room?: string;
            [key: string]: unknown | string | undefined;
        };
    };
    url: '/api/json/rooms/upsert_with_payers';
};

export type PostApiJsonRoomsUpsertWithPayersErrors = {
    /**
     * General Error
     */
    default: Errors;
};

export type PostApiJsonRoomsUpsertWithPayersError = PostApiJsonRoomsUpsertWithPayersErrors[keyof PostApiJsonRoomsUpsertWithPayersErrors];

export type PostApiJsonRoomsUpsertWithPayersResponses = {
    /**
     * Success
     */
    201: {
        data?: Room;
        included?: Array<Payer>;
        meta?: {
            [key: string]: unknown;
        };
    };
};

export type PostApiJsonRoomsUpsertWithPayersResponse = PostApiJsonRoomsUpsertWithPayersResponses[keyof PostApiJsonRoomsUpsertWithPayersResponses];

export type GetApiJsonRoomsByIdPayersData = {
    body?: never;
    path: {
        id: string;
    };
    query?: {
        /**
         * Relationship paths to include in the response
         */
        include?: string;
        /**
         * Limits the response fields to only those listed for each type
         */
        fields?: {
            /**
             * Comma separated field names for payer
             */
            payer?: string;
            [key: string]: unknown | string | undefined;
        };
    };
    url: '/api/json/rooms/{id}/payers';
};

export type GetApiJsonRoomsByIdPayersErrors = {
    /**
     * General Error
     */
    default: Errors;
};

export type GetApiJsonRoomsByIdPayersError = GetApiJsonRoomsByIdPayersErrors[keyof GetApiJsonRoomsByIdPayersErrors];

export type GetApiJsonRoomsByIdPayersResponses = {
    /**
     * Success
     */
    200: {
        data?: Payer;
        included?: Array<Room | PayItem>;
        meta?: {
            [key: string]: unknown;
        };
    };
};

export type GetApiJsonRoomsByIdPayersResponse = GetApiJsonRoomsByIdPayersResponses[keyof GetApiJsonRoomsByIdPayersResponses];

export type ClientOptions = {
    baseUrl: 'http://localhost:4002' | (string & {});
};